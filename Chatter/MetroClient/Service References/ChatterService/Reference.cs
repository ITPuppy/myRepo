//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetroClient.ChatterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseRole", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.UserGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.Member))]
    public partial class BaseRole : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Group : MetroClient.ChatterService.BaseRole {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member[] GroupMemberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member[] GroupMember {
            get {
                return this.GroupMemberField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupMemberField, value) != true)) {
                    this.GroupMemberField = value;
                    this.RaisePropertyChanged("GroupMember");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerIdField, value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserGroup", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class UserGroup : MetroClient.ChatterService.BaseRole {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member[] membersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userGroupNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member[] members {
            get {
                return this.membersField;
            }
            set {
                if ((object.ReferenceEquals(this.membersField, value) != true)) {
                    this.membersField = value;
                    this.RaisePropertyChanged("members");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userGroupId {
            get {
                return this.userGroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.userGroupIdField, value) != true)) {
                    this.userGroupIdField = value;
                    this.RaisePropertyChanged("userGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userGroupName {
            get {
                return this.userGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userGroupNameField, value) != true)) {
                    this.userGroupNameField = value;
                    this.RaisePropertyChanged("userGroupName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Member", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Member : MetroClient.ChatterService.BaseRole {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime birthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string infomationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MemberStatus statusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime birthday {
            get {
                return this.birthdayField;
            }
            set {
                if ((this.birthdayField.Equals(value) != true)) {
                    this.birthdayField = value;
                    this.RaisePropertyChanged("birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string infomation {
            get {
                return this.infomationField;
            }
            set {
                if ((object.ReferenceEquals(this.infomationField, value) != true)) {
                    this.infomationField = value;
                    this.RaisePropertyChanged("infomation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickName {
            get {
                return this.nickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.nickNameField, value) != true)) {
                    this.nickNameField = value;
                    this.RaisePropertyChanged("nickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sex {
            get {
                return this.sexField;
            }
            set {
                if ((object.ReferenceEquals(this.sexField, value) != true)) {
                    this.sexField = value;
                    this.RaisePropertyChanged("sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MemberStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemberStatus", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MemberStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Levave = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MyEndPoint EndPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Group GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member MemberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MesgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MessageStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MessageType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.UserGroup UserGroupField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MyEndPoint EndPoint {
            get {
                return this.EndPointField;
            }
            set {
                if ((object.ReferenceEquals(this.EndPointField, value) != true)) {
                    this.EndPointField = value;
                    this.RaisePropertyChanged("EndPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Group Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((object.ReferenceEquals(this.GuidField, value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member Member {
            get {
                return this.MemberField;
            }
            set {
                if ((object.ReferenceEquals(this.MemberField, value) != true)) {
                    this.MemberField = value;
                    this.RaisePropertyChanged("Member");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mesg {
            get {
                return this.MesgField;
            }
            set {
                if ((object.ReferenceEquals(this.MesgField, value) != true)) {
                    this.MesgField = value;
                    this.RaisePropertyChanged("Mesg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MessageStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.UserGroup UserGroup {
            get {
                return this.UserGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.UserGroupField, value) != true)) {
                    this.UserGroupField = value;
                    this.RaisePropertyChanged("UserGroup");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyEndPoint", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class MyEndPoint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageStatus", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MessageStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accept = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Refuse = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TextMessage = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Video = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Audio = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Command = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Login = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Logoff = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddFriend = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddGroup = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddFriend2Group = 9,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.CommandMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.FileMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.AudioMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.TextMessage))]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.BaseRole fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime sendTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.BaseRole toField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MessageType typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.BaseRole from {
            get {
                return this.fromField;
            }
            set {
                if ((object.ReferenceEquals(this.fromField, value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime sendTime {
            get {
                return this.sendTimeField;
            }
            set {
                if ((this.sendTimeField.Equals(value) != true)) {
                    this.sendTimeField = value;
                    this.RaisePropertyChanged("sendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.BaseRole to {
            get {
                return this.toField;
            }
            set {
                if ((object.ReferenceEquals(this.toField, value) != true)) {
                    this.toField = value;
                    this.RaisePropertyChanged("to");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MessageType type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandMessage", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class CommandMessage : MetroClient.ChatterService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MyCommandType CommandTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MyCommandType CommandType {
            get {
                return this.CommandTypeField;
            }
            set {
                if ((this.CommandTypeField.Equals(value) != true)) {
                    this.CommandTypeField = value;
                    this.RaisePropertyChanged("CommandType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((object.ReferenceEquals(this.GuidField, value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileMessage", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class FileMessage : MetroClient.ChatterService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MyEndPoint EndPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MyEndPoint EndPoint {
            get {
                return this.EndPointField;
            }
            set {
                if ((object.ReferenceEquals(this.EndPointField, value) != true)) {
                    this.EndPointField = value;
                    this.RaisePropertyChanged("EndPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((object.ReferenceEquals(this.GuidField, value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AudioMessage", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class AudioMessage : MetroClient.ChatterService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MyEndPoint ServerEndPointField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MyEndPoint ServerEndPoint {
            get {
                return this.ServerEndPointField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerEndPointField, value) != true)) {
                    this.ServerEndPointField = value;
                    this.RaisePropertyChanged("ServerEndPoint");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextMessage", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class TextMessage : MetroClient.ChatterService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string msgField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msg {
            get {
                return this.msgField;
            }
            set {
                if ((object.ReferenceEquals(this.msgField, value) != true)) {
                    this.msgField = value;
                    this.RaisePropertyChanged("msg");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyCommandType", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MyCommandType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CanceledSendFile = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CanceledAudioRequest = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatterService.IChatter", CallbackContract=typeof(MetroClient.ChatterService.IChatterCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatter/Login", ReplyAction="http://tempuri.org/IChatter/LoginResponse")]
        MetroClient.ChatterService.Result Login(MetroClient.ChatterService.Member member);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatter/Login", ReplyAction="http://tempuri.org/IChatter/LoginResponse")]
        System.IAsyncResult BeginLogin(MetroClient.ChatterService.Member member, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IChatter/Logoff")]
        void Logoff(MetroClient.ChatterService.Member member);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/Logoff")]
        System.IAsyncResult BeginLogoff(MetroClient.ChatterService.Member member, System.AsyncCallback callback, object asyncState);
        
        void EndLogoff(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/GetFriends", ReplyAction="http://tempuri.org/IChatter/GetFriendsResponse")]
        MetroClient.ChatterService.UserGroup[] GetFriends(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/GetFriends", ReplyAction="http://tempuri.org/IChatter/GetFriendsResponse")]
        System.IAsyncResult BeginGetFriends(string id, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.UserGroup[] EndGetFriends(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/GetGroups", ReplyAction="http://tempuri.org/IChatter/GetGroupsResponse")]
        MetroClient.ChatterService.Group[] GetGroups(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/GetGroups", ReplyAction="http://tempuri.org/IChatter/GetGroupsResponse")]
        System.IAsyncResult BeginGetGroups(string id, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Group[] EndGetGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/IsOnlie", ReplyAction="http://tempuri.org/IChatter/IsOnlieResponse")]
        bool IsOnlie(string friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/IsOnlie", ReplyAction="http://tempuri.org/IChatter/IsOnlieResponse")]
        System.IAsyncResult BeginIsOnlie(string friendId, System.AsyncCallback callback, object asyncState);
        
        bool EndIsOnlie(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IChatter/AddFriend")]
        void AddFriend(string friendId, string userGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/AddFriend")]
        System.IAsyncResult BeginAddFriend(string friendId, string userGroupId, System.AsyncCallback callback, object asyncState);
        
        void EndAddFriend(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/DeleteFriend", ReplyAction="http://tempuri.org/IChatter/DeleteFriendResponse")]
        MetroClient.ChatterService.Result DeleteFriend(string id, string userGroupId, string friend);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/DeleteFriend", ReplyAction="http://tempuri.org/IChatter/DeleteFriendResponse")]
        System.IAsyncResult BeginDeleteFriend(string id, string userGroupId, string friend, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndDeleteFriend(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddGroup", ReplyAction="http://tempuri.org/IChatter/AddGroupResponse")]
        MetroClient.ChatterService.Result AddGroup(MetroClient.ChatterService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/AddGroup", ReplyAction="http://tempuri.org/IChatter/AddGroupResponse")]
        System.IAsyncResult BeginAddGroup(MetroClient.ChatterService.Group group, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndAddGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IChatter/AddFriend2Group")]
        void AddFriend2Group(string friendId, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/AddFriend2Group")]
        System.IAsyncResult BeginAddFriend2Group(string friendId, string groupId, System.AsyncCallback callback, object asyncState);
        
        void EndAddFriend2Group(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/SendMesg", ReplyAction="http://tempuri.org/IChatter/SendMesgResponse")]
        MetroClient.ChatterService.MessageStatus SendMesg(MetroClient.ChatterService.Message mesg);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/SendMesg", ReplyAction="http://tempuri.org/IChatter/SendMesgResponse")]
        System.IAsyncResult BeginSendMesg(MetroClient.ChatterService.Message mesg, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.MessageStatus EndSendMesg(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddUserGroup", ReplyAction="http://tempuri.org/IChatter/AddUserGroupResponse")]
        MetroClient.ChatterService.Result AddUserGroup(MetroClient.ChatterService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/AddUserGroup", ReplyAction="http://tempuri.org/IChatter/AddUserGroupResponse")]
        System.IAsyncResult BeginAddUserGroup(MetroClient.ChatterService.UserGroup userGroup, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndAddUserGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/DeleteUserGroup", ReplyAction="http://tempuri.org/IChatter/DeleteUserGroupResponse")]
        MetroClient.ChatterService.Result DeleteUserGroup(string id, MetroClient.ChatterService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/DeleteUserGroup", ReplyAction="http://tempuri.org/IChatter/DeleteUserGroupResponse")]
        System.IAsyncResult BeginDeleteUserGroup(string id, MetroClient.ChatterService.UserGroup userGroup, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndDeleteUserGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/SendHeartBeat", ReplyAction="http://tempuri.org/IChatter/SendHeartBeatResponse")]
        void SendHeartBeat();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/SendHeartBeat", ReplyAction="http://tempuri.org/IChatter/SendHeartBeatResponse")]
        System.IAsyncResult BeginSendHeartBeat(System.AsyncCallback callback, object asyncState);
        
        void EndSendHeartBeat(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/ResponseToRequest", ReplyAction="http://tempuri.org/IChatter/ResponseToRequestResponse")]
        MetroClient.ChatterService.Result ResponseToRequest(MetroClient.ChatterService.Result result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/ResponseToRequest", ReplyAction="http://tempuri.org/IChatter/ResponseToRequestResponse")]
        System.IAsyncResult BeginResponseToRequest(MetroClient.ChatterService.Result result, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndResponseToRequest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatterCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/OnLogin")]
        void OnLogin(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/OnLogin")]
        System.IAsyncResult BeginOnLogin(string id, System.AsyncCallback callback, object asyncState);
        
        void EndOnLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/OnSendMessage")]
        void OnSendMessage(MetroClient.ChatterService.Message mesg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/OnSendMessage")]
        System.IAsyncResult BeginOnSendMessage(MetroClient.ChatterService.Message mesg, System.AsyncCallback callback, object asyncState);
        
        void EndOnSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/OnLogoff")]
        void OnLogoff(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/OnLogoff")]
        System.IAsyncResult BeginOnLogoff(string id, System.AsyncCallback callback, object asyncState);
        
        void EndOnLogoff(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/RequestToTargetClient")]
        void RequestToTargetClient(MetroClient.ChatterService.Message mesg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/RequestToTargetClient")]
        System.IAsyncResult BeginRequestToTargetClient(MetroClient.ChatterService.Message mesg, System.AsyncCallback callback, object asyncState);
        
        void EndRequestToTargetClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/ReponseToSouceClient")]
        void ReponseToSouceClient(MetroClient.ChatterService.Result result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/ReponseToSouceClient")]
        System.IAsyncResult BeginReponseToSouceClient(MetroClient.ChatterService.Result result, System.AsyncCallback callback, object asyncState);
        
        void EndReponseToSouceClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/SendMyEndPoint")]
        void SendMyEndPoint(MetroClient.ChatterService.MyEndPoint endPoint, MetroClient.ChatterService.Member member, bool isFrom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/SendMyEndPoint")]
        System.IAsyncResult BeginSendMyEndPoint(MetroClient.ChatterService.MyEndPoint endPoint, MetroClient.ChatterService.Member member, bool isFrom, System.AsyncCallback callback, object asyncState);
        
        void EndSendMyEndPoint(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatterChannel : MetroClient.ChatterService.IChatter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.UserGroup[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.UserGroup[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Group[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Group[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsOnlieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsOnlieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFriendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFriendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMesgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendMesgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.MessageStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.MessageStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResponseToRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResponseToRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatterClient : System.ServiceModel.DuplexClientBase<MetroClient.ChatterService.IChatter>, MetroClient.ChatterService.IChatter {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoffDelegate;
        
        private EndOperationDelegate onEndLogoffDelegate;
        
        private System.Threading.SendOrPostCallback onLogoffCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFriendsDelegate;
        
        private EndOperationDelegate onEndGetFriendsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFriendsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupsDelegate;
        
        private EndOperationDelegate onEndGetGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsOnlieDelegate;
        
        private EndOperationDelegate onEndIsOnlieDelegate;
        
        private System.Threading.SendOrPostCallback onIsOnlieCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFriendDelegate;
        
        private EndOperationDelegate onEndAddFriendDelegate;
        
        private System.Threading.SendOrPostCallback onAddFriendCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFriendDelegate;
        
        private EndOperationDelegate onEndDeleteFriendDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFriendCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddGroupDelegate;
        
        private EndOperationDelegate onEndAddGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFriend2GroupDelegate;
        
        private EndOperationDelegate onEndAddFriend2GroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddFriend2GroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMesgDelegate;
        
        private EndOperationDelegate onEndSendMesgDelegate;
        
        private System.Threading.SendOrPostCallback onSendMesgCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserGroupDelegate;
        
        private EndOperationDelegate onEndAddUserGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserGroupDelegate;
        
        private EndOperationDelegate onEndDeleteUserGroupDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendHeartBeatDelegate;
        
        private EndOperationDelegate onEndSendHeartBeatDelegate;
        
        private System.Threading.SendOrPostCallback onSendHeartBeatCompletedDelegate;
        
        private BeginOperationDelegate onBeginResponseToRequestDelegate;
        
        private EndOperationDelegate onEndResponseToRequestDelegate;
        
        private System.Threading.SendOrPostCallback onResponseToRequestCompletedDelegate;
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogoffCompleted;
        
        public event System.EventHandler<GetFriendsCompletedEventArgs> GetFriendsCompleted;
        
        public event System.EventHandler<GetGroupsCompletedEventArgs> GetGroupsCompleted;
        
        public event System.EventHandler<IsOnlieCompletedEventArgs> IsOnlieCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddFriendCompleted;
        
        public event System.EventHandler<DeleteFriendCompletedEventArgs> DeleteFriendCompleted;
        
        public event System.EventHandler<AddGroupCompletedEventArgs> AddGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddFriend2GroupCompleted;
        
        public event System.EventHandler<SendMesgCompletedEventArgs> SendMesgCompleted;
        
        public event System.EventHandler<AddUserGroupCompletedEventArgs> AddUserGroupCompleted;
        
        public event System.EventHandler<DeleteUserGroupCompletedEventArgs> DeleteUserGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendHeartBeatCompleted;
        
        public event System.EventHandler<ResponseToRequestCompletedEventArgs> ResponseToRequestCompleted;
        
        public MetroClient.ChatterService.Result Login(MetroClient.ChatterService.Member member) {
            return base.Channel.Login(member);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(MetroClient.ChatterService.Member member, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(member, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Member member = ((MetroClient.ChatterService.Member)(inValues[0]));
            return this.BeginLogin(member, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(MetroClient.ChatterService.Member member) {
            this.LoginAsync(member, null);
        }
        
        public void LoginAsync(MetroClient.ChatterService.Member member, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        member}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public void Logoff(MetroClient.ChatterService.Member member) {
            base.Channel.Logoff(member);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogoff(MetroClient.ChatterService.Member member, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogoff(member, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogoff(System.IAsyncResult result) {
            base.Channel.EndLogoff(result);
        }
        
        private System.IAsyncResult OnBeginLogoff(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Member member = ((MetroClient.ChatterService.Member)(inValues[0]));
            return this.BeginLogoff(member, callback, asyncState);
        }
        
        private object[] OnEndLogoff(System.IAsyncResult result) {
            this.EndLogoff(result);
            return null;
        }
        
        private void OnLogoffCompleted(object state) {
            if ((this.LogoffCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoffAsync(MetroClient.ChatterService.Member member) {
            this.LogoffAsync(member, null);
        }
        
        public void LogoffAsync(MetroClient.ChatterService.Member member, object userState) {
            if ((this.onBeginLogoffDelegate == null)) {
                this.onBeginLogoffDelegate = new BeginOperationDelegate(this.OnBeginLogoff);
            }
            if ((this.onEndLogoffDelegate == null)) {
                this.onEndLogoffDelegate = new EndOperationDelegate(this.OnEndLogoff);
            }
            if ((this.onLogoffCompletedDelegate == null)) {
                this.onLogoffCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoffCompleted);
            }
            base.InvokeAsync(this.onBeginLogoffDelegate, new object[] {
                        member}, this.onEndLogoffDelegate, this.onLogoffCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.UserGroup[] GetFriends(string id) {
            return base.Channel.GetFriends(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFriends(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFriends(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.UserGroup[] EndGetFriends(System.IAsyncResult result) {
            return base.Channel.EndGetFriends(result);
        }
        
        private System.IAsyncResult OnBeginGetFriends(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return this.BeginGetFriends(id, callback, asyncState);
        }
        
        private object[] OnEndGetFriends(System.IAsyncResult result) {
            MetroClient.ChatterService.UserGroup[] retVal = this.EndGetFriends(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFriendsCompleted(object state) {
            if ((this.GetFriendsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFriendsCompleted(this, new GetFriendsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFriendsAsync(string id) {
            this.GetFriendsAsync(id, null);
        }
        
        public void GetFriendsAsync(string id, object userState) {
            if ((this.onBeginGetFriendsDelegate == null)) {
                this.onBeginGetFriendsDelegate = new BeginOperationDelegate(this.OnBeginGetFriends);
            }
            if ((this.onEndGetFriendsDelegate == null)) {
                this.onEndGetFriendsDelegate = new EndOperationDelegate(this.OnEndGetFriends);
            }
            if ((this.onGetFriendsCompletedDelegate == null)) {
                this.onGetFriendsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFriendsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFriendsDelegate, new object[] {
                        id}, this.onEndGetFriendsDelegate, this.onGetFriendsCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Group[] GetGroups(string id) {
            return base.Channel.GetGroups(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroups(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroups(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Group[] EndGetGroups(System.IAsyncResult result) {
            return base.Channel.EndGetGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return this.BeginGetGroups(id, callback, asyncState);
        }
        
        private object[] OnEndGetGroups(System.IAsyncResult result) {
            MetroClient.ChatterService.Group[] retVal = this.EndGetGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupsCompleted(object state) {
            if ((this.GetGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupsCompleted(this, new GetGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupsAsync(string id) {
            this.GetGroupsAsync(id, null);
        }
        
        public void GetGroupsAsync(string id, object userState) {
            if ((this.onBeginGetGroupsDelegate == null)) {
                this.onBeginGetGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetGroups);
            }
            if ((this.onEndGetGroupsDelegate == null)) {
                this.onEndGetGroupsDelegate = new EndOperationDelegate(this.OnEndGetGroups);
            }
            if ((this.onGetGroupsCompletedDelegate == null)) {
                this.onGetGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupsDelegate, new object[] {
                        id}, this.onEndGetGroupsDelegate, this.onGetGroupsCompletedDelegate, userState);
        }
        
        public bool IsOnlie(string friendId) {
            return base.Channel.IsOnlie(friendId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsOnlie(string friendId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsOnlie(friendId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsOnlie(System.IAsyncResult result) {
            return base.Channel.EndIsOnlie(result);
        }
        
        private System.IAsyncResult OnBeginIsOnlie(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string friendId = ((string)(inValues[0]));
            return this.BeginIsOnlie(friendId, callback, asyncState);
        }
        
        private object[] OnEndIsOnlie(System.IAsyncResult result) {
            bool retVal = this.EndIsOnlie(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsOnlieCompleted(object state) {
            if ((this.IsOnlieCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsOnlieCompleted(this, new IsOnlieCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsOnlieAsync(string friendId) {
            this.IsOnlieAsync(friendId, null);
        }
        
        public void IsOnlieAsync(string friendId, object userState) {
            if ((this.onBeginIsOnlieDelegate == null)) {
                this.onBeginIsOnlieDelegate = new BeginOperationDelegate(this.OnBeginIsOnlie);
            }
            if ((this.onEndIsOnlieDelegate == null)) {
                this.onEndIsOnlieDelegate = new EndOperationDelegate(this.OnEndIsOnlie);
            }
            if ((this.onIsOnlieCompletedDelegate == null)) {
                this.onIsOnlieCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsOnlieCompleted);
            }
            base.InvokeAsync(this.onBeginIsOnlieDelegate, new object[] {
                        friendId}, this.onEndIsOnlieDelegate, this.onIsOnlieCompletedDelegate, userState);
        }
        
        public void AddFriend(string friendId, string userGroupId) {
            base.Channel.AddFriend(friendId, userGroupId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddFriend(string friendId, string userGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFriend(friendId, userGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddFriend(System.IAsyncResult result) {
            base.Channel.EndAddFriend(result);
        }
        
        private System.IAsyncResult OnBeginAddFriend(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string friendId = ((string)(inValues[0]));
            string userGroupId = ((string)(inValues[1]));
            return this.BeginAddFriend(friendId, userGroupId, callback, asyncState);
        }
        
        private object[] OnEndAddFriend(System.IAsyncResult result) {
            this.EndAddFriend(result);
            return null;
        }
        
        private void OnAddFriendCompleted(object state) {
            if ((this.AddFriendCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFriendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFriendAsync(string friendId, string userGroupId) {
            this.AddFriendAsync(friendId, userGroupId, null);
        }
        
        public void AddFriendAsync(string friendId, string userGroupId, object userState) {
            if ((this.onBeginAddFriendDelegate == null)) {
                this.onBeginAddFriendDelegate = new BeginOperationDelegate(this.OnBeginAddFriend);
            }
            if ((this.onEndAddFriendDelegate == null)) {
                this.onEndAddFriendDelegate = new EndOperationDelegate(this.OnEndAddFriend);
            }
            if ((this.onAddFriendCompletedDelegate == null)) {
                this.onAddFriendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFriendCompleted);
            }
            base.InvokeAsync(this.onBeginAddFriendDelegate, new object[] {
                        friendId,
                        userGroupId}, this.onEndAddFriendDelegate, this.onAddFriendCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Result DeleteFriend(string id, string userGroupId, string friend) {
            return base.Channel.DeleteFriend(id, userGroupId, friend);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteFriend(string id, string userGroupId, string friend, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFriend(id, userGroupId, friend, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndDeleteFriend(System.IAsyncResult result) {
            return base.Channel.EndDeleteFriend(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFriend(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string userGroupId = ((string)(inValues[1]));
            string friend = ((string)(inValues[2]));
            return this.BeginDeleteFriend(id, userGroupId, friend, callback, asyncState);
        }
        
        private object[] OnEndDeleteFriend(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndDeleteFriend(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFriendCompleted(object state) {
            if ((this.DeleteFriendCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFriendCompleted(this, new DeleteFriendCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFriendAsync(string id, string userGroupId, string friend) {
            this.DeleteFriendAsync(id, userGroupId, friend, null);
        }
        
        public void DeleteFriendAsync(string id, string userGroupId, string friend, object userState) {
            if ((this.onBeginDeleteFriendDelegate == null)) {
                this.onBeginDeleteFriendDelegate = new BeginOperationDelegate(this.OnBeginDeleteFriend);
            }
            if ((this.onEndDeleteFriendDelegate == null)) {
                this.onEndDeleteFriendDelegate = new EndOperationDelegate(this.OnEndDeleteFriend);
            }
            if ((this.onDeleteFriendCompletedDelegate == null)) {
                this.onDeleteFriendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFriendCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFriendDelegate, new object[] {
                        id,
                        userGroupId,
                        friend}, this.onEndDeleteFriendDelegate, this.onDeleteFriendCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Result AddGroup(MetroClient.ChatterService.Group group) {
            return base.Channel.AddGroup(group);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddGroup(MetroClient.ChatterService.Group group, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddGroup(group, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndAddGroup(System.IAsyncResult result) {
            return base.Channel.EndAddGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Group group = ((MetroClient.ChatterService.Group)(inValues[0]));
            return this.BeginAddGroup(group, callback, asyncState);
        }
        
        private object[] OnEndAddGroup(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndAddGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddGroupCompleted(object state) {
            if ((this.AddGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddGroupCompleted(this, new AddGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddGroupAsync(MetroClient.ChatterService.Group group) {
            this.AddGroupAsync(group, null);
        }
        
        public void AddGroupAsync(MetroClient.ChatterService.Group group, object userState) {
            if ((this.onBeginAddGroupDelegate == null)) {
                this.onBeginAddGroupDelegate = new BeginOperationDelegate(this.OnBeginAddGroup);
            }
            if ((this.onEndAddGroupDelegate == null)) {
                this.onEndAddGroupDelegate = new EndOperationDelegate(this.OnEndAddGroup);
            }
            if ((this.onAddGroupCompletedDelegate == null)) {
                this.onAddGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddGroupDelegate, new object[] {
                        group}, this.onEndAddGroupDelegate, this.onAddGroupCompletedDelegate, userState);
        }
        
        public void AddFriend2Group(string friendId, string groupId) {
            base.Channel.AddFriend2Group(friendId, groupId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddFriend2Group(string friendId, string groupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFriend2Group(friendId, groupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddFriend2Group(System.IAsyncResult result) {
            base.Channel.EndAddFriend2Group(result);
        }
        
        private System.IAsyncResult OnBeginAddFriend2Group(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string friendId = ((string)(inValues[0]));
            string groupId = ((string)(inValues[1]));
            return this.BeginAddFriend2Group(friendId, groupId, callback, asyncState);
        }
        
        private object[] OnEndAddFriend2Group(System.IAsyncResult result) {
            this.EndAddFriend2Group(result);
            return null;
        }
        
        private void OnAddFriend2GroupCompleted(object state) {
            if ((this.AddFriend2GroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFriend2GroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFriend2GroupAsync(string friendId, string groupId) {
            this.AddFriend2GroupAsync(friendId, groupId, null);
        }
        
        public void AddFriend2GroupAsync(string friendId, string groupId, object userState) {
            if ((this.onBeginAddFriend2GroupDelegate == null)) {
                this.onBeginAddFriend2GroupDelegate = new BeginOperationDelegate(this.OnBeginAddFriend2Group);
            }
            if ((this.onEndAddFriend2GroupDelegate == null)) {
                this.onEndAddFriend2GroupDelegate = new EndOperationDelegate(this.OnEndAddFriend2Group);
            }
            if ((this.onAddFriend2GroupCompletedDelegate == null)) {
                this.onAddFriend2GroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFriend2GroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddFriend2GroupDelegate, new object[] {
                        friendId,
                        groupId}, this.onEndAddFriend2GroupDelegate, this.onAddFriend2GroupCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.MessageStatus SendMesg(MetroClient.ChatterService.Message mesg) {
            return base.Channel.SendMesg(mesg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMesg(MetroClient.ChatterService.Message mesg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMesg(mesg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.MessageStatus EndSendMesg(System.IAsyncResult result) {
            return base.Channel.EndSendMesg(result);
        }
        
        private System.IAsyncResult OnBeginSendMesg(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Message mesg = ((MetroClient.ChatterService.Message)(inValues[0]));
            return this.BeginSendMesg(mesg, callback, asyncState);
        }
        
        private object[] OnEndSendMesg(System.IAsyncResult result) {
            MetroClient.ChatterService.MessageStatus retVal = this.EndSendMesg(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendMesgCompleted(object state) {
            if ((this.SendMesgCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMesgCompleted(this, new SendMesgCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMesgAsync(MetroClient.ChatterService.Message mesg) {
            this.SendMesgAsync(mesg, null);
        }
        
        public void SendMesgAsync(MetroClient.ChatterService.Message mesg, object userState) {
            if ((this.onBeginSendMesgDelegate == null)) {
                this.onBeginSendMesgDelegate = new BeginOperationDelegate(this.OnBeginSendMesg);
            }
            if ((this.onEndSendMesgDelegate == null)) {
                this.onEndSendMesgDelegate = new EndOperationDelegate(this.OnEndSendMesg);
            }
            if ((this.onSendMesgCompletedDelegate == null)) {
                this.onSendMesgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMesgCompleted);
            }
            base.InvokeAsync(this.onBeginSendMesgDelegate, new object[] {
                        mesg}, this.onEndSendMesgDelegate, this.onSendMesgCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Result AddUserGroup(MetroClient.ChatterService.UserGroup userGroup) {
            return base.Channel.AddUserGroup(userGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddUserGroup(MetroClient.ChatterService.UserGroup userGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUserGroup(userGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndAddUserGroup(System.IAsyncResult result) {
            return base.Channel.EndAddUserGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddUserGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.UserGroup userGroup = ((MetroClient.ChatterService.UserGroup)(inValues[0]));
            return this.BeginAddUserGroup(userGroup, callback, asyncState);
        }
        
        private object[] OnEndAddUserGroup(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndAddUserGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserGroupCompleted(object state) {
            if ((this.AddUserGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserGroupCompleted(this, new AddUserGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserGroupAsync(MetroClient.ChatterService.UserGroup userGroup) {
            this.AddUserGroupAsync(userGroup, null);
        }
        
        public void AddUserGroupAsync(MetroClient.ChatterService.UserGroup userGroup, object userState) {
            if ((this.onBeginAddUserGroupDelegate == null)) {
                this.onBeginAddUserGroupDelegate = new BeginOperationDelegate(this.OnBeginAddUserGroup);
            }
            if ((this.onEndAddUserGroupDelegate == null)) {
                this.onEndAddUserGroupDelegate = new EndOperationDelegate(this.OnEndAddUserGroup);
            }
            if ((this.onAddUserGroupCompletedDelegate == null)) {
                this.onAddUserGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserGroupDelegate, new object[] {
                        userGroup}, this.onEndAddUserGroupDelegate, this.onAddUserGroupCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Result DeleteUserGroup(string id, MetroClient.ChatterService.UserGroup userGroup) {
            return base.Channel.DeleteUserGroup(id, userGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteUserGroup(string id, MetroClient.ChatterService.UserGroup userGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUserGroup(id, userGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndDeleteUserGroup(System.IAsyncResult result) {
            return base.Channel.EndDeleteUserGroup(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUserGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            MetroClient.ChatterService.UserGroup userGroup = ((MetroClient.ChatterService.UserGroup)(inValues[1]));
            return this.BeginDeleteUserGroup(id, userGroup, callback, asyncState);
        }
        
        private object[] OnEndDeleteUserGroup(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndDeleteUserGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserGroupCompleted(object state) {
            if ((this.DeleteUserGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserGroupCompleted(this, new DeleteUserGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserGroupAsync(string id, MetroClient.ChatterService.UserGroup userGroup) {
            this.DeleteUserGroupAsync(id, userGroup, null);
        }
        
        public void DeleteUserGroupAsync(string id, MetroClient.ChatterService.UserGroup userGroup, object userState) {
            if ((this.onBeginDeleteUserGroupDelegate == null)) {
                this.onBeginDeleteUserGroupDelegate = new BeginOperationDelegate(this.OnBeginDeleteUserGroup);
            }
            if ((this.onEndDeleteUserGroupDelegate == null)) {
                this.onEndDeleteUserGroupDelegate = new EndOperationDelegate(this.OnEndDeleteUserGroup);
            }
            if ((this.onDeleteUserGroupCompletedDelegate == null)) {
                this.onDeleteUserGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserGroupCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserGroupDelegate, new object[] {
                        id,
                        userGroup}, this.onEndDeleteUserGroupDelegate, this.onDeleteUserGroupCompletedDelegate, userState);
        }
        
        public void SendHeartBeat() {
            base.Channel.SendHeartBeat();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendHeartBeat(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendHeartBeat(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendHeartBeat(System.IAsyncResult result) {
            base.Channel.EndSendHeartBeat(result);
        }
        
        private System.IAsyncResult OnBeginSendHeartBeat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSendHeartBeat(callback, asyncState);
        }
        
        private object[] OnEndSendHeartBeat(System.IAsyncResult result) {
            this.EndSendHeartBeat(result);
            return null;
        }
        
        private void OnSendHeartBeatCompleted(object state) {
            if ((this.SendHeartBeatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendHeartBeatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendHeartBeatAsync() {
            this.SendHeartBeatAsync(null);
        }
        
        public void SendHeartBeatAsync(object userState) {
            if ((this.onBeginSendHeartBeatDelegate == null)) {
                this.onBeginSendHeartBeatDelegate = new BeginOperationDelegate(this.OnBeginSendHeartBeat);
            }
            if ((this.onEndSendHeartBeatDelegate == null)) {
                this.onEndSendHeartBeatDelegate = new EndOperationDelegate(this.OnEndSendHeartBeat);
            }
            if ((this.onSendHeartBeatCompletedDelegate == null)) {
                this.onSendHeartBeatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendHeartBeatCompleted);
            }
            base.InvokeAsync(this.onBeginSendHeartBeatDelegate, null, this.onEndSendHeartBeatDelegate, this.onSendHeartBeatCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Result ResponseToRequest(MetroClient.ChatterService.Result result) {
            return base.Channel.ResponseToRequest(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResponseToRequest(MetroClient.ChatterService.Result result, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResponseToRequest(result, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndResponseToRequest(System.IAsyncResult result) {
            return base.Channel.EndResponseToRequest(result);
        }
        
        private System.IAsyncResult OnBeginResponseToRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Result result = ((MetroClient.ChatterService.Result)(inValues[0]));
            return this.BeginResponseToRequest(result, callback, asyncState);
        }
        
        private object[] OnEndResponseToRequest(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndResponseToRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResponseToRequestCompleted(object state) {
            if ((this.ResponseToRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResponseToRequestCompleted(this, new ResponseToRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResponseToRequestAsync(MetroClient.ChatterService.Result result) {
            this.ResponseToRequestAsync(result, null);
        }
        
        public void ResponseToRequestAsync(MetroClient.ChatterService.Result result, object userState) {
            if ((this.onBeginResponseToRequestDelegate == null)) {
                this.onBeginResponseToRequestDelegate = new BeginOperationDelegate(this.OnBeginResponseToRequest);
            }
            if ((this.onEndResponseToRequestDelegate == null)) {
                this.onEndResponseToRequestDelegate = new EndOperationDelegate(this.OnEndResponseToRequest);
            }
            if ((this.onResponseToRequestCompletedDelegate == null)) {
                this.onResponseToRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResponseToRequestCompleted);
            }
            base.InvokeAsync(this.onBeginResponseToRequestDelegate, new object[] {
                        result}, this.onEndResponseToRequestDelegate, this.onResponseToRequestCompletedDelegate, userState);
        }
    }
}
