//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetroClient.ChatterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseRole", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.UserGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.Member))]
    public partial class BaseRole : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserGroup", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class UserGroup : MetroClient.ChatterService.BaseRole {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member[] membersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userGroupNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member[] members {
            get {
                return this.membersField;
            }
            set {
                if ((object.ReferenceEquals(this.membersField, value) != true)) {
                    this.membersField = value;
                    this.RaisePropertyChanged("members");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userGroupId {
            get {
                return this.userGroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.userGroupIdField, value) != true)) {
                    this.userGroupIdField = value;
                    this.RaisePropertyChanged("userGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userGroupName {
            get {
                return this.userGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userGroupNameField, value) != true)) {
                    this.userGroupNameField = value;
                    this.RaisePropertyChanged("userGroupName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Group : MetroClient.ChatterService.BaseRole {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string groupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] groupMemberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ownerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string groupId {
            get {
                return this.groupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.groupIdField, value) != true)) {
                    this.groupIdField = value;
                    this.RaisePropertyChanged("groupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] groupMember {
            get {
                return this.groupMemberField;
            }
            set {
                if ((object.ReferenceEquals(this.groupMemberField, value) != true)) {
                    this.groupMemberField = value;
                    this.RaisePropertyChanged("groupMember");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ownerId {
            get {
                return this.ownerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ownerIdField, value) != true)) {
                    this.ownerIdField = value;
                    this.RaisePropertyChanged("ownerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Member", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Member : MetroClient.ChatterService.BaseRole {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime birthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string infomationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MemberStatus statusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime birthday {
            get {
                return this.birthdayField;
            }
            set {
                if ((this.birthdayField.Equals(value) != true)) {
                    this.birthdayField = value;
                    this.RaisePropertyChanged("birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string infomation {
            get {
                return this.infomationField;
            }
            set {
                if ((object.ReferenceEquals(this.infomationField, value) != true)) {
                    this.infomationField = value;
                    this.RaisePropertyChanged("infomation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickName {
            get {
                return this.nickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.nickNameField, value) != true)) {
                    this.nickNameField = value;
                    this.RaisePropertyChanged("nickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sex {
            get {
                return this.sexField;
            }
            set {
                if ((object.ReferenceEquals(this.sexField, value) != true)) {
                    this.sexField = value;
                    this.RaisePropertyChanged("sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MemberStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemberStatus", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MemberStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Levave = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member memberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MessageStatus statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.UserGroup userGroupField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member member {
            get {
                return this.memberField;
            }
            set {
                if ((object.ReferenceEquals(this.memberField, value) != true)) {
                    this.memberField = value;
                    this.RaisePropertyChanged("member");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MessageStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.UserGroup userGroup {
            get {
                return this.userGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.userGroupField, value) != true)) {
                    this.userGroupField = value;
                    this.RaisePropertyChanged("userGroup");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageStatus", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MessageStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accept = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Refuse = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.TextMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.FileMessage))]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime sendTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.BaseRole toField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MessageType typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member from {
            get {
                return this.fromField;
            }
            set {
                if ((object.ReferenceEquals(this.fromField, value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime sendTime {
            get {
                return this.sendTimeField;
            }
            set {
                if ((this.sendTimeField.Equals(value) != true)) {
                    this.sendTimeField = value;
                    this.RaisePropertyChanged("sendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.BaseRole to {
            get {
                return this.toField;
            }
            set {
                if ((object.ReferenceEquals(this.toField, value) != true)) {
                    this.toField = value;
                    this.RaisePropertyChanged("to");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MessageType type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextMessage", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class TextMessage : MetroClient.ChatterService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string msgField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msg {
            get {
                return this.msgField;
            }
            set {
                if ((object.ReferenceEquals(this.msgField, value) != true)) {
                    this.msgField = value;
                    this.RaisePropertyChanged("msg");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileMessage", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class FileMessage : MetroClient.ChatterService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fileNameField, value) != true)) {
                    this.fileNameField = value;
                    this.RaisePropertyChanged("fileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int size {
            get {
                return this.sizeField;
            }
            set {
                if ((this.sizeField.Equals(value) != true)) {
                    this.sizeField = value;
                    this.RaisePropertyChanged("size");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TextMessage = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Video = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Audio = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Command = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Login = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Logoff = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddFriend = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddGroup = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddFriend2Group = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatterService.IChatter", CallbackContract=typeof(MetroClient.ChatterService.IChatterCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatter/Login", ReplyAction="http://tempuri.org/IChatter/LoginResponse")]
        MetroClient.ChatterService.Result Login(MetroClient.ChatterService.Member member);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatter/Login", ReplyAction="http://tempuri.org/IChatter/LoginResponse")]
        System.IAsyncResult BeginLogin(MetroClient.ChatterService.Member member, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/GetFriends", ReplyAction="http://tempuri.org/IChatter/GetFriendsResponse")]
        MetroClient.ChatterService.UserGroup[] GetFriends(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/GetFriends", ReplyAction="http://tempuri.org/IChatter/GetFriendsResponse")]
        System.IAsyncResult BeginGetFriends(string id, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.UserGroup[] EndGetFriends(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/GetGroups", ReplyAction="http://tempuri.org/IChatter/GetGroupsResponse")]
        MetroClient.ChatterService.Group[] GetGroups(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/GetGroups", ReplyAction="http://tempuri.org/IChatter/GetGroupsResponse")]
        System.IAsyncResult BeginGetGroups(string id, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Group[] EndGetGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddFriend", ReplyAction="http://tempuri.org/IChatter/AddFriendResponse")]
        MetroClient.ChatterService.Result AddFriend(string friendId, string userGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/AddFriend", ReplyAction="http://tempuri.org/IChatter/AddFriendResponse")]
        System.IAsyncResult BeginAddFriend(string friendId, string userGroupId, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndAddFriend(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddGroup", ReplyAction="http://tempuri.org/IChatter/AddGroupResponse")]
        MetroClient.ChatterService.MessageStatus AddGroup(MetroClient.ChatterService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/AddGroup", ReplyAction="http://tempuri.org/IChatter/AddGroupResponse")]
        System.IAsyncResult BeginAddGroup(MetroClient.ChatterService.Group group, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.MessageStatus EndAddGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddFriend2Group", ReplyAction="http://tempuri.org/IChatter/AddFriend2GroupResponse")]
        MetroClient.ChatterService.MessageStatus AddFriend2Group(string friendId, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/AddFriend2Group", ReplyAction="http://tempuri.org/IChatter/AddFriend2GroupResponse")]
        System.IAsyncResult BeginAddFriend2Group(string friendId, string groupId, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.MessageStatus EndAddFriend2Group(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/SendMesg", ReplyAction="http://tempuri.org/IChatter/SendMesgResponse")]
        MetroClient.ChatterService.MessageStatus SendMesg(MetroClient.ChatterService.Message mesg);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/SendMesg", ReplyAction="http://tempuri.org/IChatter/SendMesgResponse")]
        System.IAsyncResult BeginSendMesg(MetroClient.ChatterService.Message mesg, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.MessageStatus EndSendMesg(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddUserGroup", ReplyAction="http://tempuri.org/IChatter/AddUserGroupResponse")]
        MetroClient.ChatterService.Result AddUserGroup(MetroClient.ChatterService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/AddUserGroup", ReplyAction="http://tempuri.org/IChatter/AddUserGroupResponse")]
        System.IAsyncResult BeginAddUserGroup(MetroClient.ChatterService.UserGroup userGroup, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.Result EndAddUserGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IChatter/Logoff", ReplyAction="http://tempuri.org/IChatter/LogoffResponse")]
        MetroClient.ChatterService.MessageStatus Logoff(MetroClient.ChatterService.Member member);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IChatter/Logoff", ReplyAction="http://tempuri.org/IChatter/LogoffResponse")]
        System.IAsyncResult BeginLogoff(MetroClient.ChatterService.Member member, System.AsyncCallback callback, object asyncState);
        
        MetroClient.ChatterService.MessageStatus EndLogoff(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatterCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/OnLogin")]
        void OnLogin(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/OnLogin")]
        System.IAsyncResult BeginOnLogin(string id, System.AsyncCallback callback, object asyncState);
        
        void EndOnLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/OnSendMessage")]
        void OnSendMessage(MetroClient.ChatterService.Result result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/OnSendMessage")]
        System.IAsyncResult BeginOnSendMessage(MetroClient.ChatterService.Result result, System.AsyncCallback callback, object asyncState);
        
        void EndOnSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/OnLogoff")]
        void OnLogoff(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChatter/OnLogoff")]
        System.IAsyncResult BeginOnLogoff(string id, System.AsyncCallback callback, object asyncState);
        
        void EndOnLogoff(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatterChannel : MetroClient.ChatterService.IChatter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.UserGroup[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.UserGroup[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Group[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Group[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFriendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFriendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.MessageStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.MessageStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFriend2GroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFriend2GroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.MessageStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.MessageStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMesgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendMesgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.MessageStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.MessageStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogoffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogoffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroClient.ChatterService.MessageStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroClient.ChatterService.MessageStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatterClient : System.ServiceModel.DuplexClientBase<MetroClient.ChatterService.IChatter>, MetroClient.ChatterService.IChatter {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFriendsDelegate;
        
        private EndOperationDelegate onEndGetFriendsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFriendsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupsDelegate;
        
        private EndOperationDelegate onEndGetGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFriendDelegate;
        
        private EndOperationDelegate onEndAddFriendDelegate;
        
        private System.Threading.SendOrPostCallback onAddFriendCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddGroupDelegate;
        
        private EndOperationDelegate onEndAddGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFriend2GroupDelegate;
        
        private EndOperationDelegate onEndAddFriend2GroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddFriend2GroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMesgDelegate;
        
        private EndOperationDelegate onEndSendMesgDelegate;
        
        private System.Threading.SendOrPostCallback onSendMesgCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserGroupDelegate;
        
        private EndOperationDelegate onEndAddUserGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoffDelegate;
        
        private EndOperationDelegate onEndLogoffDelegate;
        
        private System.Threading.SendOrPostCallback onLogoffCompletedDelegate;
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetFriendsCompletedEventArgs> GetFriendsCompleted;
        
        public event System.EventHandler<GetGroupsCompletedEventArgs> GetGroupsCompleted;
        
        public event System.EventHandler<AddFriendCompletedEventArgs> AddFriendCompleted;
        
        public event System.EventHandler<AddGroupCompletedEventArgs> AddGroupCompleted;
        
        public event System.EventHandler<AddFriend2GroupCompletedEventArgs> AddFriend2GroupCompleted;
        
        public event System.EventHandler<SendMesgCompletedEventArgs> SendMesgCompleted;
        
        public event System.EventHandler<AddUserGroupCompletedEventArgs> AddUserGroupCompleted;
        
        public event System.EventHandler<LogoffCompletedEventArgs> LogoffCompleted;
        
        public MetroClient.ChatterService.Result Login(MetroClient.ChatterService.Member member) {
            return base.Channel.Login(member);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(MetroClient.ChatterService.Member member, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(member, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Member member = ((MetroClient.ChatterService.Member)(inValues[0]));
            return this.BeginLogin(member, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(MetroClient.ChatterService.Member member) {
            this.LoginAsync(member, null);
        }
        
        public void LoginAsync(MetroClient.ChatterService.Member member, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        member}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.UserGroup[] GetFriends(string id) {
            return base.Channel.GetFriends(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFriends(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFriends(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.UserGroup[] EndGetFriends(System.IAsyncResult result) {
            return base.Channel.EndGetFriends(result);
        }
        
        private System.IAsyncResult OnBeginGetFriends(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return this.BeginGetFriends(id, callback, asyncState);
        }
        
        private object[] OnEndGetFriends(System.IAsyncResult result) {
            MetroClient.ChatterService.UserGroup[] retVal = this.EndGetFriends(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFriendsCompleted(object state) {
            if ((this.GetFriendsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFriendsCompleted(this, new GetFriendsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFriendsAsync(string id) {
            this.GetFriendsAsync(id, null);
        }
        
        public void GetFriendsAsync(string id, object userState) {
            if ((this.onBeginGetFriendsDelegate == null)) {
                this.onBeginGetFriendsDelegate = new BeginOperationDelegate(this.OnBeginGetFriends);
            }
            if ((this.onEndGetFriendsDelegate == null)) {
                this.onEndGetFriendsDelegate = new EndOperationDelegate(this.OnEndGetFriends);
            }
            if ((this.onGetFriendsCompletedDelegate == null)) {
                this.onGetFriendsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFriendsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFriendsDelegate, new object[] {
                        id}, this.onEndGetFriendsDelegate, this.onGetFriendsCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Group[] GetGroups(string id) {
            return base.Channel.GetGroups(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroups(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroups(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Group[] EndGetGroups(System.IAsyncResult result) {
            return base.Channel.EndGetGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return this.BeginGetGroups(id, callback, asyncState);
        }
        
        private object[] OnEndGetGroups(System.IAsyncResult result) {
            MetroClient.ChatterService.Group[] retVal = this.EndGetGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupsCompleted(object state) {
            if ((this.GetGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupsCompleted(this, new GetGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupsAsync(string id) {
            this.GetGroupsAsync(id, null);
        }
        
        public void GetGroupsAsync(string id, object userState) {
            if ((this.onBeginGetGroupsDelegate == null)) {
                this.onBeginGetGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetGroups);
            }
            if ((this.onEndGetGroupsDelegate == null)) {
                this.onEndGetGroupsDelegate = new EndOperationDelegate(this.OnEndGetGroups);
            }
            if ((this.onGetGroupsCompletedDelegate == null)) {
                this.onGetGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupsDelegate, new object[] {
                        id}, this.onEndGetGroupsDelegate, this.onGetGroupsCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Result AddFriend(string friendId, string userGroupId) {
            return base.Channel.AddFriend(friendId, userGroupId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddFriend(string friendId, string userGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFriend(friendId, userGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndAddFriend(System.IAsyncResult result) {
            return base.Channel.EndAddFriend(result);
        }
        
        private System.IAsyncResult OnBeginAddFriend(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string friendId = ((string)(inValues[0]));
            string userGroupId = ((string)(inValues[1]));
            return this.BeginAddFriend(friendId, userGroupId, callback, asyncState);
        }
        
        private object[] OnEndAddFriend(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndAddFriend(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFriendCompleted(object state) {
            if ((this.AddFriendCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFriendCompleted(this, new AddFriendCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFriendAsync(string friendId, string userGroupId) {
            this.AddFriendAsync(friendId, userGroupId, null);
        }
        
        public void AddFriendAsync(string friendId, string userGroupId, object userState) {
            if ((this.onBeginAddFriendDelegate == null)) {
                this.onBeginAddFriendDelegate = new BeginOperationDelegate(this.OnBeginAddFriend);
            }
            if ((this.onEndAddFriendDelegate == null)) {
                this.onEndAddFriendDelegate = new EndOperationDelegate(this.OnEndAddFriend);
            }
            if ((this.onAddFriendCompletedDelegate == null)) {
                this.onAddFriendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFriendCompleted);
            }
            base.InvokeAsync(this.onBeginAddFriendDelegate, new object[] {
                        friendId,
                        userGroupId}, this.onEndAddFriendDelegate, this.onAddFriendCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.MessageStatus AddGroup(MetroClient.ChatterService.Group group) {
            return base.Channel.AddGroup(group);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddGroup(MetroClient.ChatterService.Group group, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddGroup(group, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.MessageStatus EndAddGroup(System.IAsyncResult result) {
            return base.Channel.EndAddGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Group group = ((MetroClient.ChatterService.Group)(inValues[0]));
            return this.BeginAddGroup(group, callback, asyncState);
        }
        
        private object[] OnEndAddGroup(System.IAsyncResult result) {
            MetroClient.ChatterService.MessageStatus retVal = this.EndAddGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddGroupCompleted(object state) {
            if ((this.AddGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddGroupCompleted(this, new AddGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddGroupAsync(MetroClient.ChatterService.Group group) {
            this.AddGroupAsync(group, null);
        }
        
        public void AddGroupAsync(MetroClient.ChatterService.Group group, object userState) {
            if ((this.onBeginAddGroupDelegate == null)) {
                this.onBeginAddGroupDelegate = new BeginOperationDelegate(this.OnBeginAddGroup);
            }
            if ((this.onEndAddGroupDelegate == null)) {
                this.onEndAddGroupDelegate = new EndOperationDelegate(this.OnEndAddGroup);
            }
            if ((this.onAddGroupCompletedDelegate == null)) {
                this.onAddGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddGroupDelegate, new object[] {
                        group}, this.onEndAddGroupDelegate, this.onAddGroupCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.MessageStatus AddFriend2Group(string friendId, string groupId) {
            return base.Channel.AddFriend2Group(friendId, groupId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddFriend2Group(string friendId, string groupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFriend2Group(friendId, groupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.MessageStatus EndAddFriend2Group(System.IAsyncResult result) {
            return base.Channel.EndAddFriend2Group(result);
        }
        
        private System.IAsyncResult OnBeginAddFriend2Group(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string friendId = ((string)(inValues[0]));
            string groupId = ((string)(inValues[1]));
            return this.BeginAddFriend2Group(friendId, groupId, callback, asyncState);
        }
        
        private object[] OnEndAddFriend2Group(System.IAsyncResult result) {
            MetroClient.ChatterService.MessageStatus retVal = this.EndAddFriend2Group(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFriend2GroupCompleted(object state) {
            if ((this.AddFriend2GroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFriend2GroupCompleted(this, new AddFriend2GroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFriend2GroupAsync(string friendId, string groupId) {
            this.AddFriend2GroupAsync(friendId, groupId, null);
        }
        
        public void AddFriend2GroupAsync(string friendId, string groupId, object userState) {
            if ((this.onBeginAddFriend2GroupDelegate == null)) {
                this.onBeginAddFriend2GroupDelegate = new BeginOperationDelegate(this.OnBeginAddFriend2Group);
            }
            if ((this.onEndAddFriend2GroupDelegate == null)) {
                this.onEndAddFriend2GroupDelegate = new EndOperationDelegate(this.OnEndAddFriend2Group);
            }
            if ((this.onAddFriend2GroupCompletedDelegate == null)) {
                this.onAddFriend2GroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFriend2GroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddFriend2GroupDelegate, new object[] {
                        friendId,
                        groupId}, this.onEndAddFriend2GroupDelegate, this.onAddFriend2GroupCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.MessageStatus SendMesg(MetroClient.ChatterService.Message mesg) {
            return base.Channel.SendMesg(mesg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMesg(MetroClient.ChatterService.Message mesg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMesg(mesg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.MessageStatus EndSendMesg(System.IAsyncResult result) {
            return base.Channel.EndSendMesg(result);
        }
        
        private System.IAsyncResult OnBeginSendMesg(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Message mesg = ((MetroClient.ChatterService.Message)(inValues[0]));
            return this.BeginSendMesg(mesg, callback, asyncState);
        }
        
        private object[] OnEndSendMesg(System.IAsyncResult result) {
            MetroClient.ChatterService.MessageStatus retVal = this.EndSendMesg(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendMesgCompleted(object state) {
            if ((this.SendMesgCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMesgCompleted(this, new SendMesgCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMesgAsync(MetroClient.ChatterService.Message mesg) {
            this.SendMesgAsync(mesg, null);
        }
        
        public void SendMesgAsync(MetroClient.ChatterService.Message mesg, object userState) {
            if ((this.onBeginSendMesgDelegate == null)) {
                this.onBeginSendMesgDelegate = new BeginOperationDelegate(this.OnBeginSendMesg);
            }
            if ((this.onEndSendMesgDelegate == null)) {
                this.onEndSendMesgDelegate = new EndOperationDelegate(this.OnEndSendMesg);
            }
            if ((this.onSendMesgCompletedDelegate == null)) {
                this.onSendMesgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMesgCompleted);
            }
            base.InvokeAsync(this.onBeginSendMesgDelegate, new object[] {
                        mesg}, this.onEndSendMesgDelegate, this.onSendMesgCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.Result AddUserGroup(MetroClient.ChatterService.UserGroup userGroup) {
            return base.Channel.AddUserGroup(userGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddUserGroup(MetroClient.ChatterService.UserGroup userGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUserGroup(userGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.Result EndAddUserGroup(System.IAsyncResult result) {
            return base.Channel.EndAddUserGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddUserGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.UserGroup userGroup = ((MetroClient.ChatterService.UserGroup)(inValues[0]));
            return this.BeginAddUserGroup(userGroup, callback, asyncState);
        }
        
        private object[] OnEndAddUserGroup(System.IAsyncResult result) {
            MetroClient.ChatterService.Result retVal = this.EndAddUserGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserGroupCompleted(object state) {
            if ((this.AddUserGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserGroupCompleted(this, new AddUserGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserGroupAsync(MetroClient.ChatterService.UserGroup userGroup) {
            this.AddUserGroupAsync(userGroup, null);
        }
        
        public void AddUserGroupAsync(MetroClient.ChatterService.UserGroup userGroup, object userState) {
            if ((this.onBeginAddUserGroupDelegate == null)) {
                this.onBeginAddUserGroupDelegate = new BeginOperationDelegate(this.OnBeginAddUserGroup);
            }
            if ((this.onEndAddUserGroupDelegate == null)) {
                this.onEndAddUserGroupDelegate = new EndOperationDelegate(this.OnEndAddUserGroup);
            }
            if ((this.onAddUserGroupCompletedDelegate == null)) {
                this.onAddUserGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserGroupDelegate, new object[] {
                        userGroup}, this.onEndAddUserGroupDelegate, this.onAddUserGroupCompletedDelegate, userState);
        }
        
        public MetroClient.ChatterService.MessageStatus Logoff(MetroClient.ChatterService.Member member) {
            return base.Channel.Logoff(member);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogoff(MetroClient.ChatterService.Member member, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogoff(member, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MetroClient.ChatterService.MessageStatus EndLogoff(System.IAsyncResult result) {
            return base.Channel.EndLogoff(result);
        }
        
        private System.IAsyncResult OnBeginLogoff(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroClient.ChatterService.Member member = ((MetroClient.ChatterService.Member)(inValues[0]));
            return this.BeginLogoff(member, callback, asyncState);
        }
        
        private object[] OnEndLogoff(System.IAsyncResult result) {
            MetroClient.ChatterService.MessageStatus retVal = this.EndLogoff(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogoffCompleted(object state) {
            if ((this.LogoffCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoffCompleted(this, new LogoffCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoffAsync(MetroClient.ChatterService.Member member) {
            this.LogoffAsync(member, null);
        }
        
        public void LogoffAsync(MetroClient.ChatterService.Member member, object userState) {
            if ((this.onBeginLogoffDelegate == null)) {
                this.onBeginLogoffDelegate = new BeginOperationDelegate(this.OnBeginLogoff);
            }
            if ((this.onEndLogoffDelegate == null)) {
                this.onEndLogoffDelegate = new EndOperationDelegate(this.OnEndLogoff);
            }
            if ((this.onLogoffCompletedDelegate == null)) {
                this.onLogoffCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoffCompleted);
            }
            base.InvokeAsync(this.onBeginLogoffDelegate, new object[] {
                        member}, this.onEndLogoffDelegate, this.onLogoffCompletedDelegate, userState);
        }
    }
}
