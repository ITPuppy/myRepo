//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetroClient.ChatterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseRole", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.Member))]
    public partial class BaseRole : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Group : MetroClient.ChatterService.BaseRole {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string groupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] groupMemberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ownerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string groupId {
            get {
                return this.groupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.groupIdField, value) != true)) {
                    this.groupIdField = value;
                    this.RaisePropertyChanged("groupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] groupMember {
            get {
                return this.groupMemberField;
            }
            set {
                if ((object.ReferenceEquals(this.groupMemberField, value) != true)) {
                    this.groupMemberField = value;
                    this.RaisePropertyChanged("groupMember");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ownerId {
            get {
                return this.ownerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ownerIdField, value) != true)) {
                    this.ownerIdField = value;
                    this.RaisePropertyChanged("ownerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Member", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Member : MetroClient.ChatterService.BaseRole {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime birthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string infomationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MemberStatus statusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime birthday {
            get {
                return this.birthdayField;
            }
            set {
                if ((this.birthdayField.Equals(value) != true)) {
                    this.birthdayField = value;
                    this.RaisePropertyChanged("birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string infomation {
            get {
                return this.infomationField;
            }
            set {
                if ((object.ReferenceEquals(this.infomationField, value) != true)) {
                    this.infomationField = value;
                    this.RaisePropertyChanged("infomation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickName {
            get {
                return this.nickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.nickNameField, value) != true)) {
                    this.nickNameField = value;
                    this.RaisePropertyChanged("nickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sex {
            get {
                return this.sexField;
            }
            set {
                if ((object.ReferenceEquals(this.sexField, value) != true)) {
                    this.sexField = value;
                    this.RaisePropertyChanged("sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MemberStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemberStatus", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MemberStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Levave = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member memberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MessageStatus statusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member member {
            get {
                return this.memberField;
            }
            set {
                if ((object.ReferenceEquals(this.memberField, value) != true)) {
                    this.memberField = value;
                    this.RaisePropertyChanged("member");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MessageStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageStatus", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MessageStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accept = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Refuse = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Friend", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class Friend : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member memberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userGroupNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member member {
            get {
                return this.memberField;
            }
            set {
                if ((object.ReferenceEquals(this.memberField, value) != true)) {
                    this.memberField = value;
                    this.RaisePropertyChanged("member");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userGroupId {
            get {
                return this.userGroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.userGroupIdField, value) != true)) {
                    this.userGroupIdField = value;
                    this.RaisePropertyChanged("userGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userGroupName {
            get {
                return this.userGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userGroupNameField, value) != true)) {
                    this.userGroupNameField = value;
                    this.RaisePropertyChanged("userGroupName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.FileMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MetroClient.ChatterService.TextMessage))]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.Member fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime sendTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.BaseRole toField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MetroClient.ChatterService.MessageType typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.Member from {
            get {
                return this.fromField;
            }
            set {
                if ((object.ReferenceEquals(this.fromField, value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime sendTime {
            get {
                return this.sendTimeField;
            }
            set {
                if ((this.sendTimeField.Equals(value) != true)) {
                    this.sendTimeField = value;
                    this.RaisePropertyChanged("sendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.BaseRole to {
            get {
                return this.toField;
            }
            set {
                if ((object.ReferenceEquals(this.toField, value) != true)) {
                    this.toField = value;
                    this.RaisePropertyChanged("to");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroClient.ChatterService.MessageType type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileMessage", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class FileMessage : MetroClient.ChatterService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fileNameField, value) != true)) {
                    this.fileNameField = value;
                    this.RaisePropertyChanged("fileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int size {
            get {
                return this.sizeField;
            }
            set {
                if ((this.sizeField.Equals(value) != true)) {
                    this.sizeField = value;
                    this.RaisePropertyChanged("size");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextMessage", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    [System.SerializableAttribute()]
    public partial class TextMessage : MetroClient.ChatterService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string msgField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msg {
            get {
                return this.msgField;
            }
            set {
                if ((object.ReferenceEquals(this.msgField, value) != true)) {
                    this.msgField = value;
                    this.RaisePropertyChanged("msg");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/Chatter.Contract.DataContract")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TextMessage = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Video = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Audio = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Command = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Login = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Logoff = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddFriend = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddGroup = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddFriend2Group = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatterService.IChatter", CallbackContract=typeof(MetroClient.ChatterService.IChatterCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatter/Login", ReplyAction="http://tempuri.org/IChatter/LoginResponse")]
        MetroClient.ChatterService.Result Login(MetroClient.ChatterService.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatter/Login", ReplyAction="http://tempuri.org/IChatter/LoginResponse")]
        System.Threading.Tasks.Task<MetroClient.ChatterService.Result> LoginAsync(MetroClient.ChatterService.Member member);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/GetFriends", ReplyAction="http://tempuri.org/IChatter/GetFriendsResponse")]
        System.Collections.Generic.Dictionary<string, MetroClient.ChatterService.Friend[]> GetFriends(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/GetFriends", ReplyAction="http://tempuri.org/IChatter/GetFriendsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, MetroClient.ChatterService.Friend[]>> GetFriendsAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/GetGroups", ReplyAction="http://tempuri.org/IChatter/GetGroupsResponse")]
        MetroClient.ChatterService.Group[] GetGroups(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/GetGroups", ReplyAction="http://tempuri.org/IChatter/GetGroupsResponse")]
        System.Threading.Tasks.Task<MetroClient.ChatterService.Group[]> GetGroupsAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddFriend", ReplyAction="http://tempuri.org/IChatter/AddFriendResponse")]
        MetroClient.ChatterService.MessageStatus AddFriend(string id, string friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddFriend", ReplyAction="http://tempuri.org/IChatter/AddFriendResponse")]
        System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> AddFriendAsync(string id, string friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddGroup", ReplyAction="http://tempuri.org/IChatter/AddGroupResponse")]
        MetroClient.ChatterService.MessageStatus AddGroup(MetroClient.ChatterService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddGroup", ReplyAction="http://tempuri.org/IChatter/AddGroupResponse")]
        System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> AddGroupAsync(MetroClient.ChatterService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddFriend2Group", ReplyAction="http://tempuri.org/IChatter/AddFriend2GroupResponse")]
        MetroClient.ChatterService.MessageStatus AddFriend2Group(string friendId, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/AddFriend2Group", ReplyAction="http://tempuri.org/IChatter/AddFriend2GroupResponse")]
        System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> AddFriend2GroupAsync(string friendId, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/SendMesg", ReplyAction="http://tempuri.org/IChatter/SendMesgResponse")]
        MetroClient.ChatterService.MessageStatus SendMesg(MetroClient.ChatterService.Message mesg);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IChatter/SendMesg", ReplyAction="http://tempuri.org/IChatter/SendMesgResponse")]
        System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> SendMesgAsync(MetroClient.ChatterService.Message mesg);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IChatter/Logoff", ReplyAction="http://tempuri.org/IChatter/LogoffResponse")]
        MetroClient.ChatterService.MessageStatus Logoff(MetroClient.ChatterService.Member member);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IChatter/Logoff", ReplyAction="http://tempuri.org/IChatter/LogoffResponse")]
        System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> LogoffAsync(MetroClient.ChatterService.Member member);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatterCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/OnLogin")]
        void OnLogin(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatter/SendMessageCallback")]
        void SendMessageCallback(MetroClient.ChatterService.Result result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatter/OnLogoff", ReplyAction="http://tempuri.org/IChatter/OnLogoffResponse")]
        void OnLogoff(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatterChannel : MetroClient.ChatterService.IChatter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatterClient : System.ServiceModel.DuplexClientBase<MetroClient.ChatterService.IChatter>, MetroClient.ChatterService.IChatter {
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatterClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public MetroClient.ChatterService.Result Login(MetroClient.ChatterService.Member member) {
            return base.Channel.Login(member);
        }
        
        public System.Threading.Tasks.Task<MetroClient.ChatterService.Result> LoginAsync(MetroClient.ChatterService.Member member) {
            return base.Channel.LoginAsync(member);
        }
        
        public System.Collections.Generic.Dictionary<string, MetroClient.ChatterService.Friend[]> GetFriends(string id) {
            return base.Channel.GetFriends(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, MetroClient.ChatterService.Friend[]>> GetFriendsAsync(string id) {
            return base.Channel.GetFriendsAsync(id);
        }
        
        public MetroClient.ChatterService.Group[] GetGroups(string id) {
            return base.Channel.GetGroups(id);
        }
        
        public System.Threading.Tasks.Task<MetroClient.ChatterService.Group[]> GetGroupsAsync(string id) {
            return base.Channel.GetGroupsAsync(id);
        }
        
        public MetroClient.ChatterService.MessageStatus AddFriend(string id, string friendId) {
            return base.Channel.AddFriend(id, friendId);
        }
        
        public System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> AddFriendAsync(string id, string friendId) {
            return base.Channel.AddFriendAsync(id, friendId);
        }
        
        public MetroClient.ChatterService.MessageStatus AddGroup(MetroClient.ChatterService.Group group) {
            return base.Channel.AddGroup(group);
        }
        
        public System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> AddGroupAsync(MetroClient.ChatterService.Group group) {
            return base.Channel.AddGroupAsync(group);
        }
        
        public MetroClient.ChatterService.MessageStatus AddFriend2Group(string friendId, string groupId) {
            return base.Channel.AddFriend2Group(friendId, groupId);
        }
        
        public System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> AddFriend2GroupAsync(string friendId, string groupId) {
            return base.Channel.AddFriend2GroupAsync(friendId, groupId);
        }
        
        public MetroClient.ChatterService.MessageStatus SendMesg(MetroClient.ChatterService.Message mesg) {
            return base.Channel.SendMesg(mesg);
        }
        
        public System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> SendMesgAsync(MetroClient.ChatterService.Message mesg) {
            return base.Channel.SendMesgAsync(mesg);
        }
        
        public MetroClient.ChatterService.MessageStatus Logoff(MetroClient.ChatterService.Member member) {
            return base.Channel.Logoff(member);
        }
        
        public System.Threading.Tasks.Task<MetroClient.ChatterService.MessageStatus> LogoffAsync(MetroClient.ChatterService.Member member) {
            return base.Channel.LogoffAsync(member);
        }
    }
}
